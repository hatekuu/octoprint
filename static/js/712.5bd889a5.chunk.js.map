{"version":3,"file":"static/js/712.5bd889a5.chunk.js","mappings":"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","sources":["components/home/modal/modal.js","components/home/GcodeUpload/GcodeUpload.js","components/home/Order/FilterProducts.js","components/home/Printer/SelectPrinter.js","components/home/Bill/ViewPrintingFiles.js","components/home/Home.js"],"sourcesContent":["import React from 'react';\r\nimport './Modal.css'; // Đảm bảo bạn đã tạo file CSS cho modal\r\n\r\nconst Modal = ({ isOpen, onClose, printers, onSelectPrinter }) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <button className=\"modal-close\" onClick={onClose}>X</button>\r\n        <h2>Select a Printer</h2>\r\n        <div className=\"printer-list\">\r\n          {printers && printers.length > 0 ? (\r\n            printers.map((printer) => (\r\n              <div \r\n                key={printer._id} \r\n                onClick={() => onSelectPrinter(printer)}\r\n                className=\"printer-item\"\r\n              >\r\n                <h3>{printer.machineName}</h3>\r\n                <p><strong>Vật liệu:</strong> {printer.material}</p>\r\n                <p><strong>Màu:</strong> {printer.color}</p>\r\n                <p><strong>Số file đang chờ:</strong> {printer.queueLength}</p>\r\n                <p><strong>Loại máy:</strong> {printer.type}</p>\r\n                <p><strong>Tốc độ:</strong> {printer.speed}</p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No printers available</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport './upload.css';\r\nimport Modal from '../modal/modal';\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst GcodeUpload = ({ printer }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedPrinter, setSelectedPrinter] = useState(null);\r\n  const [printers, setPrinters] = useState([]);\r\n  const [file, setFile] = useState(null);\r\n  const [fileSize, setFileSize] = useState(0);\r\n  const [message, setMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (printer?.result) {\r\n  \r\n      setPrinters(printer?.result[0]?.public?.output?.jsonData?.printer || []);\r\n    }\r\n\r\n    if (printer?.press === \"yes\") {\r\n      handleOpenModal();\r\n    }\r\n  }, [printer]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    if (selectedFile) {\r\n      const fileSizeMB = (selectedFile.size / (1024 * 1024)).toFixed(2);\r\n      if (fileSizeMB > 5) {\r\n        setMessage('File size exceeds 5MB limit. Please select a smaller file.');\r\n        setFile(null);\r\n        setFileSize(0);\r\n      } else {\r\n        setFile(selectedFile);\r\n        setFileSize(parseFloat(fileSizeMB));\r\n        setMessage('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      setMessage('No file selected');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const user = app.currentUser;\r\n      if (!user) {\r\n        setMessage('User not authenticated');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = async (event) => {\r\n        const fileContent = event.target.result;\r\n\r\n        // Extract print time from the second line\r\n        const lines = fileContent.split('\\n');\r\n        let duration = 'Unknown';\r\n        if (lines.length > 1) {\r\n          const timeLine = lines[1];\r\n          const timeMatch = timeLine.match(/;TIME:(\\d+)/);\r\n          if (timeMatch) {\r\n            duration = parseInt(timeMatch[1], 10); // Convert to an integer\r\n          }\r\n        }\r\n\r\n        if (selectedPrinter) {\r\n          const printerId = selectedPrinter._id;\r\n          const payload = {\r\n            fileName: file.name,\r\n            userId: user.id,\r\n            fileSize: parseFloat(fileSize), // Ensure fileSize is a number\r\n            fileContent,\r\n            duration,\r\n            printerId\r\n          };\r\n\r\n          const result = await user.functions.uploadGcodeFile(payload);\r\n\r\n          if (result.success) {\r\n            setMessage('File uploaded successfully');\r\n            setFile(null);\r\n            setFileSize(0);\r\n            setSelectedPrinter(null);\r\n            document.querySelector('input[type=\"file\"]').value = null; // Reset input file\r\n          } else {\r\n            console.log(result.message);\r\n            setMessage('Error uploading file: ' + result.message);\r\n          }\r\n          setIsLoading(false);\r\n        } else {\r\n          alert(\"Bạn phải chọn máy in\");\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n\r\n      reader.readAsText(file);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      setMessage('Error uploading file');\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleSelectPrinter = (printer) => {\r\n    setSelectedPrinter(printer);\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Upload G-code File</h2>\r\n      <input type=\"file\" accept=\".gcode\" onChange={handleFileChange} />\r\n      {file && <p>File size: {fileSize} MB</p>}\r\n      <button onClick={handleUpload} className=\"btn btn-info\" disabled={isLoading || !file}>\r\n        {isLoading ? 'Uploading...' : 'Upload'}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n      <Modal\r\n        isOpen={isModalOpen} \r\n        onClose={handleCloseModal} \r\n        printers={printers} \r\n        onSelectPrinter={handleSelectPrinter} \r\n      />\r\n      {selectedPrinter && (\r\n        <div>\r\n          <h2>Selected Printer:</h2>\r\n          <p><strong>Tên máy:</strong> {selectedPrinter.machineName}</p>\r\n          <p><strong>Vật liệu:</strong> {selectedPrinter.material}</p>\r\n          <p><strong>Màu:</strong> {selectedPrinter.color}</p>\r\n          <p><strong>File đang chờ:</strong> {selectedPrinter.queueLength}</p>\r\n          <p><strong>Loại máy:</strong> {selectedPrinter.type}</p>\r\n          <p><strong>Tốc độ:</strong> {selectedPrinter.speed}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GcodeUpload;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Form from '@rjsf/core';\r\nimport validator from '@rjsf/validator-ajv8';\r\nimport * as Realm from 'realm-web';\r\nimport './Modal.css'; // Import custom styles for the modal\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst FilterProducts = () => {\r\n  const [schema, setSchema] = useState({});\r\n  const [uiSchema, setUiSchema] = useState({});\r\n  const [resultData, setResultData] = useState(null); // State to store the result data\r\n  const [error, setError] = useState(null); // State to store error messages\r\n  const [loading, setLoading] = useState(true); // State to handle loading status\r\n  const [modalIsOpen, setModalIsOpen] = useState(false); // State to manage modal visibility\r\nconst [data,setData]=useState(null)\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await app.currentUser.functions.OrderModule(\"dong\");\r\n        setSchema(result[0]?.public?.input?.jsonSchema);\r\n        setUiSchema(result[0]?.public?.input?.uiSchema);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleSubmit = async ({ formData }) => {\r\n    try {\r\n      setData(formData)\r\n      const result = await app.currentUser.functions.OrderModule(formData);\r\n      setResultData(result[0]?.public?.output?.jsonData); // Update state with jsondata\r\n      setModalIsOpen(true); // Open modal after submission\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalIsOpen(false); // Close modal\r\n    setData(null)\r\n  };\r\nconst MakeBill=async()=>{\r\n  data.userId=app.currentUser.id\r\n  try {\r\n    await app.currentUser.functions.AddToBills(data);\r\n    alert(\"Đặt hàng thành công\")\r\n  } catch (error) {\r\n    console.log(error.error)\r\n  }\r\n  \r\n  setModalIsOpen(false);\r\n  setData(null)\r\n}\r\n  const formatProductionTime = (totalProductionTime) => {\r\n    const days = Math.floor(totalProductionTime);\r\n    const hours = Math.round((totalProductionTime - days) * 24);\r\n    return `${days} days ${hours} hours`;\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"filter-products\">\r\n      <h3>Chọn sản phẩm</h3>\r\n      <Form\r\n        schema={schema}\r\n        onSubmit={handleSubmit}\r\n        validator={validator}\r\n        uiSchema={uiSchema}\r\n      />\r\n\r\n      {modalIsOpen && resultData && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <p><strong>Tông giá:</strong> {resultData.totalCost.toLocaleString()}đồng</p>\r\n            <p><strong>Thời gian hoàng thành:</strong> {formatProductionTime(resultData.totalProductionTime)}</p>\r\n          <p>Bạn vẫn muốn mua chứ?</p>\r\n            <button onClick={closeModal}>Không</button>\r\n            <button onClick={MakeBill}>Có</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterProducts;\r\n","import React,{useEffect,useState} from 'react';\r\nimport Form from '@rjsf/core';\r\nimport * as Realm from 'realm-web';\r\nimport validator from '@rjsf/validator-ajv8';\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\nconst SelectPrinter = ({selectPrinter}) => {\r\nconst [schema,setSchema]= useState({})\r\nconst [uiSchema,setUiSchema]= useState({})\r\n  useEffect(()=>{\r\n        fetchData()\r\n  },[])\r\n  const fetchData =async()=>{\r\n    try {\r\n      const result = await app.currentUser.functions.printerModule(\"dong\");\r\n      setSchema(result[0]?.public?.input?.jsonSchema)\r\n      setUiSchema(result[0]?.public?.input?.uiSchema)\r\n    } catch (error) {\r\n       console.log(error.error)\r\n    }\r\n  }\r\n  const handleSubmit = async ({ formData }) => {\r\n    try {\r\n      \r\n     const result= await app.currentUser.functions.printerModule(formData);\r\n     console.log(result)\r\n    const data={\r\n      result,\r\n      press:\"yes\"\r\n    }\r\n     selectPrinter(data)\r\n    } catch (error) {\r\n      console.log(error.error)\r\n    }\r\n    // Add logic to select printer based on formData\r\n  \r\n  };\r\n\r\n  return (\r\n    <div className=\"select-printer\">\r\n      <h3>Chọn máy in</h3>\r\n      <Form schema={schema} onSubmit={handleSubmit} validator={validator} uiSchema={uiSchema} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectPrinter;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst ViewPrintingFiles = () => {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"view-printing-files\">\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewPrintingFiles;\r\n","import React, { useEffect,useState } from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport GcodeUpload from './GcodeUpload/GcodeUpload';\r\nimport FilterProducts from './Order/FilterProducts';\r\nimport SelectPrinter from './Printer/SelectPrinter';\r\nimport ViewPrintingFiles from './Bill/ViewPrintingFiles';\r\nimport './home.css';\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst Home = () => {\r\n  const [printer, setPrinter] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n     try {\r\n        console.log(app.currentUser?.accessToken)\r\n        await app.currentUser?.refreshAccessToken();\r\n        if (!app.currentUser || app.currentUser?.accessToken === \"\") {\r\n          window.location.href = '/octoprint/login';\r\n        } \r\n      } catch (error) {\r\n        console.log(error.error);\r\n  \r\n    }\r\n  };\r\n  const selectPrinter = (newMessage) => {\r\n    setPrinter(newMessage);\r\n  };\r\n  return (\r\n    <div className=\"home-container\">\r\n      <GcodeUpload  printer={printer}/>\r\n      <SelectPrinter selectPrinter={selectPrinter}  />\r\n      <ViewPrintingFiles />\r\n      <FilterProducts />\r\n     \r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["_ref","isOpen","onClose","printers","onSelectPrinter","_jsx","className","children","_jsxs","onClick","length","map","printer","machineName","material","color","queueLength","type","speed","_id","app","Realm","id","process","isModalOpen","setIsModalOpen","useState","selectedPrinter","setSelectedPrinter","setPrinters","file","setFile","fileSize","setFileSize","message","setMessage","isLoading","setIsLoading","useEffect","_printer$result$","_printer$result$$publ","_printer$result$$publ2","_printer$result$$publ3","result","public","output","jsonData","press","handleOpenModal","accept","onChange","event","selectedFile","target","files","fileSizeMB","size","toFixed","parseFloat","async","user","currentUser","reader","FileReader","onload","fileContent","lines","split","duration","timeMatch","match","parseInt","printerId","payload","fileName","name","userId","functions","uploadGcodeFile","success","document","querySelector","value","console","log","alert","readAsText","error","disabled","Modal","handleCloseModal","FilterProducts","schema","setSchema","uiSchema","setUiSchema","resultData","setResultData","setError","loading","setLoading","modalIsOpen","setModalIsOpen","data","setData","_result$","_result$$public","_result$$public$input","_result$2","_result$2$public","_result$2$public$inpu","OrderModule","input","jsonSchema","fetchData","Form","onSubmit","formData","_result$3","_result$3$public","_result$3$public$outp","validator","totalCost","toLocaleString","totalProductionTime","days","Math","floor","hours","round","concat","formatProductionTime","closeModal","AddToBills","selectPrinter","printerModule","_ref2","ViewPrintingFiles","Home","setPrinter","_app$currentUser","_app$currentUser2","_app$currentUser3","accessToken","refreshAccessToken","window","location","href","GcodeUpload","SelectPrinter","newMessage"],"sourceRoot":""}