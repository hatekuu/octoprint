{"version":3,"file":"static/js/991.d80d9988.chunk.js","mappings":"oKAGA,MAiCA,EAjCcA,IAAqD,IAApD,OAAEC,EAAM,QAAEC,EAAO,SAAEC,EAAQ,gBAAEC,GAAiBJ,EAC3D,OAAKC,GAGHI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,cAAcG,QAASP,EAAQK,SAAC,OAClDF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sBACJF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAC1BJ,GAAYA,EAASO,OAAS,EAC7BP,EAASQ,KAAKC,IACZJ,EAAAA,EAAAA,MAAA,OAEEC,QAASA,IAAML,EAAgBQ,GAC/BN,UAAU,eAAcC,SAAA,EAExBF,EAAAA,EAAAA,KAAA,MAAAE,SAAKK,EAAQC,eACbL,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,wBAAkB,IAAEK,EAAQE,aACvCN,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YAAa,IAAEK,EAAQG,UAClCP,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,qCAA0B,IAAEK,EAAQI,gBAC/CR,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sBAAkB,IAAEK,EAAQK,SACvCT,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,2BAAgB,IAAEK,EAAQM,WAThCN,EAAQO,QAajBd,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iCAxBO,IA4BZ,EC3BJa,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,0BAsJhC,EApJoBvB,IAAkB,IAAjB,QAAEY,GAASZ,EAC9B,MAAOwB,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,OAChDvB,EAAU0B,IAAeH,EAAAA,EAAAA,UAAS,KAClCI,EAAMC,IAAWL,EAAAA,EAAAA,UAAS,OAC1BM,EAAUC,IAAeP,EAAAA,EAAAA,UAAS,IAClCQ,EAASC,IAAcT,EAAAA,EAAAA,UAAS,KAChCU,EAAWC,IAAgBX,EAAAA,EAAAA,WAAS,IAE3CY,EAAAA,EAAAA,YAAU,KACc,IAADC,EAAAC,EAAAC,EAAAC,EAAV,OAAP9B,QAAO,IAAPA,GAAAA,EAAS+B,SACXC,QAAQC,IAAI,kCAA4B,OAAPjC,QAAO,IAAPA,OAAO,EAAPA,EAAS+B,OAAO,IACjDd,GAAmB,OAAPjB,QAAO,IAAPA,GAAkB,QAAX2B,EAAP3B,EAAS+B,OAAO,UAAE,IAAAJ,GAAQ,QAARC,EAAlBD,EAAoBO,cAAM,IAAAN,GAAQ,QAARC,EAA1BD,EAA4BO,cAAM,IAAAN,GAAU,QAAVC,EAAlCD,EAAoCO,gBAAQ,IAAAN,OAArC,EAAPA,EAA8C9B,UAAW,KAGhD,SAAZ,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASqC,QACXC,GACF,GACC,CAACtC,IAEJ,MAqFMsC,EAAkBA,KACtBzB,GAAe,EAAK,EAYtB,OACEjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBACJF,EAAAA,EAAAA,KAAA,SAAOY,KAAK,OAAOkC,OAAO,SAASC,SArGbC,IACxB,MAAMC,EAAeD,EAAME,OAAOC,MAAM,GACxC,GAAIF,EAAc,CAChB,MAAMG,GAAcH,EAAaI,KAAI,SAAkBC,QAAQ,GAC3DF,EAAa,GACftB,EAAW,8DACXJ,EAAQ,MACRE,EAAY,KAEZF,EAAQuB,GACRrB,EAAY2B,WAAWH,IACvBtB,EAAW,IAEf,KAyFGL,IAAQtB,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,cAAYyB,EAAS,UACjC3B,EAAAA,EAAAA,KAAA,UAAQI,QAvFSoD,UACnB,GAAK/B,EAAL,CAKAO,GAAa,GAEb,IACE,MAAMyB,EAAO1C,EAAI2C,YACjB,IAAKD,EAGH,OAFA3B,EAAW,+BACXE,GAAa,GAIf,MAAM2B,EAAS,IAAIC,WACnBD,EAAOE,OAASL,UACd,MAAMM,EAAcd,EAAME,OAAOZ,OAG3ByB,EAAQD,EAAYE,MAAM,MAChC,IAAIC,EAAY,UAChB,GAAIF,EAAM1D,OAAS,EAAG,CACpB,MACM6D,EADWH,EAAM,GACII,MAAM,eAC7BD,IACFD,EAAYG,SAASF,EAAU,GAAI,IAEvC,CAEA,GAAI5C,EAAiB,CACnB,MAAM+C,EAAY/C,EAAgBR,IAC5BwD,EAAU,CACdC,SAAU9C,EAAK+C,KACfC,OAAQhB,EAAKxC,GACbU,SAAU4B,WAAW5B,GACrBmC,cACAG,YACAI,aAGI/B,QAAemB,EAAKiB,UAAUC,gBAAgBL,GAEhDhC,EAAOsC,SACT9C,EAAW,8BACXJ,EAAQ,MACRE,EAAY,GACZL,EAAmB,MACnBsD,SAASC,cAAc,sBAAsBC,MAAQ,OAErDxC,QAAQC,IAAIF,EAAOT,SACnBC,EAAW,yBAA2BQ,EAAOT,UAE/CG,GAAa,EACf,MACEgD,MAAM,0CACNhD,GAAa,EACf,EAGF2B,EAAOsB,WAAWxD,EACpB,CAAE,MAAOyD,GACP3C,QAAQ2C,MAAM,wBAAyBA,GACvCpD,EAAW,wBACXE,GAAa,EACf,CA9DA,MAFEF,EAAW,mBAgEb,EAqBiC7B,UAAU,eAAekF,SAAUpD,IAAcN,EAAKvB,SAClF6B,EAAY,eAAiB,WAE/BF,IAAW7B,EAAAA,EAAAA,KAAA,KAAAE,SAAI2B,KAChB7B,EAAAA,EAAAA,KAACoF,EAAK,CACJxF,OAAQuB,EACRtB,QApBmBwF,KACvBjE,GAAe,EAAM,EAoBjBtB,SAAUA,EACVC,gBAlBuBQ,IAC3BgB,EAAmBhB,GACnBa,GAAe,EAAM,IAkBlBE,IACCnB,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBAAiB,IAAEoB,EAAgBd,gBAC9CL,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,wBAAkB,IAAEoB,EAAgBb,aAC/CN,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YAAa,IAAEoB,EAAgBZ,UAC1CP,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,6BAAuB,IAAEoB,EAAgBX,gBACpDR,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sBAAkB,IAAEoB,EAAgBV,SAC/CT,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EAAGF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,2BAAgB,IAAEoB,EAAgBT,cAG7C,E,iCClJV,MAiBA,EAjBuByE,KAMnBnF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kCACJF,EAAAA,EAAAA,KAACuF,EAAAA,GAAI,CACLC,OAAQC,EAAAA,GAAAA,EACRC,SATqB/F,IAAmB,IAAlB,SAAEgG,GAAUhG,EAC9B4C,QAAQC,IAAI,gBAAiBmD,EAAS,EAS1CC,UAAWA,EAAAA,GACXC,SAAUJ,EAAAA,GAAAA,OCbR1E,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,0BAwChC,EAvCsBvB,IAAsB,IAArB,cAACmG,GAAcnG,EACtC,MAAO6F,EAAOO,IAAY1E,EAAAA,EAAAA,UAAS,CAAC,IAC7BwE,EAASG,IAAc3E,EAAAA,EAAAA,UAAS,CAAC,IACtCY,EAAAA,EAAAA,YAAU,KACJgE,GAAW,GACf,IACF,MAAMA,EAAWzC,UACf,IAAK,IAAD0C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACF,MAAMjE,QAAevB,EAAI2C,YAAYgB,UAAU8B,cAAc,QAC7DT,EAAmB,QAAVG,EAAC5D,EAAO,UAAE,IAAA4D,GAAQ,QAARC,EAATD,EAAWzD,cAAM,IAAA0D,GAAO,QAAPC,EAAjBD,EAAmBM,aAAK,IAAAL,OAAf,EAATA,EAA0BM,YACpCV,EAAqB,QAAVK,EAAC/D,EAAO,UAAE,IAAA+D,GAAQ,QAARC,EAATD,EAAW5D,cAAM,IAAA6D,GAAO,QAAPC,EAAjBD,EAAmBG,aAAK,IAAAF,OAAf,EAATA,EAA0BV,SACxC,CAAE,MAAOX,GACN3C,QAAQC,IAAI0C,EAAMA,MACrB,GAkBF,OACE/E,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,yBACJF,EAAAA,EAAAA,KAACuF,EAAAA,GAAI,CAACC,OAAQA,EAAQE,SAnBLlC,UAAyB,IAAlB,SAAEmC,GAAUgB,EACtC,IACC,MAAMrE,QAAcvB,EAAI2C,YAAYgB,UAAU8B,cAAcb,GAC7DpD,QAAQC,IAAIF,GAKXwD,EAJU,CACTxD,SACAM,MAAM,OAGR,CAAE,MAAOsC,GACP3C,QAAQC,IAAI0C,EAAMA,MACpB,GAQgDU,UAAWA,EAAAA,GAAWC,SAAUA,MAC1E,EC3BV,EAX0Be,KAKtB5G,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBCCbc,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,0BAoChC,EAlCa2F,KACX,MAAOtG,EAASuG,IAAczF,EAAAA,EAAAA,UAAS,KAEvCY,EAAAA,EAAAA,YAAU,KACRgE,GAAW,GACV,IAEH,MAAMA,EAAYzC,UACf,IAAK,IAADuD,EAAAC,EAAAC,EACD1E,QAAQC,IAAmB,QAAhBuE,EAAChG,EAAI2C,mBAAW,IAAAqD,OAAA,EAAfA,EAAiBG,mBACR,QAArBF,EAAMjG,EAAI2C,mBAAW,IAAAsD,OAAA,EAAfA,EAAiBG,sBAClBpG,EAAI2C,aAAgD,MAAlB,QAAfuD,EAAAlG,EAAI2C,mBAAW,IAAAuD,OAAA,EAAfA,EAAiBC,eACvCE,OAAOC,SAASC,KAAO,mBAE3B,CAAE,MAAOpC,GACP3C,QAAQC,IAAI0C,EAAMA,MAEtB,GAKF,OACE/E,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAACuH,EAAW,CAAEhH,QAASA,KACvBP,EAAAA,EAAAA,KAACwH,EAAa,CAAC1B,cANI2B,IACrBX,EAAWW,EAAW,KAMpBzH,EAAAA,EAAAA,KAAC4G,EAAiB,KAClB5G,EAAAA,EAAAA,KAACsF,EAAc,MAGX,C","sources":["components/home/modal.js","components/home/GcodeUpload.js","components/home/FilterProducts.js","components/home/SelectPrinter.js","components/home/ViewPrintingFiles.js","components/home/Home.js"],"sourcesContent":["import React from 'react';\r\nimport './Modal.css'; // Đảm bảo bạn đã tạo file CSS cho modal\r\n\r\nconst Modal = ({ isOpen, onClose, printers, onSelectPrinter }) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <button className=\"modal-close\" onClick={onClose}>X</button>\r\n        <h2>Select a Printer</h2>\r\n        <div className=\"printer-list\">\r\n          {printers && printers.length > 0 ? (\r\n            printers.map((printer) => (\r\n              <div \r\n                key={printer._id} \r\n                onClick={() => onSelectPrinter(printer)}\r\n                className=\"printer-item\"\r\n              >\r\n                <h3>{printer.machineName}</h3>\r\n                <p><strong>Vật liệu:</strong> {printer.material}</p>\r\n                <p><strong>Màu:</strong> {printer.color}</p>\r\n                <p><strong>Số file đang chờ:</strong> {printer.queueLength}</p>\r\n                <p><strong>Loại máy:</strong> {printer.type}</p>\r\n                <p><strong>Tốc độ:</strong> {printer.speed}</p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No printers available</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport './upload.css';\r\nimport Modal from './modal';\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst GcodeUpload = ({ printer }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedPrinter, setSelectedPrinter] = useState(null);\r\n  const [printers, setPrinters] = useState([]);\r\n  const [file, setFile] = useState(null);\r\n  const [fileSize, setFileSize] = useState(0);\r\n  const [message, setMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (printer?.result) {\r\n      console.log(\"đây là bên gcode:\", printer?.result[0]);\r\n      setPrinters(printer?.result[0]?.public?.output?.jsonData?.printer || []);\r\n    }\r\n\r\n    if (printer?.press === \"yes\") {\r\n      handleOpenModal();\r\n    }\r\n  }, [printer]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    if (selectedFile) {\r\n      const fileSizeMB = (selectedFile.size / (1024 * 1024)).toFixed(2);\r\n      if (fileSizeMB > 5) {\r\n        setMessage('File size exceeds 5MB limit. Please select a smaller file.');\r\n        setFile(null);\r\n        setFileSize(0);\r\n      } else {\r\n        setFile(selectedFile);\r\n        setFileSize(parseFloat(fileSizeMB));\r\n        setMessage('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      setMessage('No file selected');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const user = app.currentUser;\r\n      if (!user) {\r\n        setMessage('User not authenticated');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = async (event) => {\r\n        const fileContent = event.target.result;\r\n\r\n        // Extract print time from the second line\r\n        const lines = fileContent.split('\\n');\r\n        let printTime = 'Unknown';\r\n        if (lines.length > 1) {\r\n          const timeLine = lines[1];\r\n          const timeMatch = timeLine.match(/;TIME:(\\d+)/);\r\n          if (timeMatch) {\r\n            printTime = parseInt(timeMatch[1], 10); // Convert to an integer\r\n          }\r\n        }\r\n\r\n        if (selectedPrinter) {\r\n          const printerId = selectedPrinter._id;\r\n          const payload = {\r\n            fileName: file.name,\r\n            userId: user.id,\r\n            fileSize: parseFloat(fileSize), // Ensure fileSize is a number\r\n            fileContent,\r\n            printTime,\r\n            printerId\r\n          };\r\n\r\n          const result = await user.functions.uploadGcodeFile(payload);\r\n\r\n          if (result.success) {\r\n            setMessage('File uploaded successfully');\r\n            setFile(null);\r\n            setFileSize(0);\r\n            setSelectedPrinter(null);\r\n            document.querySelector('input[type=\"file\"]').value = null; // Reset input file\r\n          } else {\r\n            console.log(result.message);\r\n            setMessage('Error uploading file: ' + result.message);\r\n          }\r\n          setIsLoading(false);\r\n        } else {\r\n          alert(\"Bạn phải chọn máy in\");\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n\r\n      reader.readAsText(file);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      setMessage('Error uploading file');\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleSelectPrinter = (printer) => {\r\n    setSelectedPrinter(printer);\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Upload G-code File</h2>\r\n      <input type=\"file\" accept=\".gcode\" onChange={handleFileChange} />\r\n      {file && <p>File size: {fileSize} MB</p>}\r\n      <button onClick={handleUpload} className=\"btn btn-info\" disabled={isLoading || !file}>\r\n        {isLoading ? 'Uploading...' : 'Upload'}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n      <Modal\r\n        isOpen={isModalOpen} \r\n        onClose={handleCloseModal} \r\n        printers={printers} \r\n        onSelectPrinter={handleSelectPrinter} \r\n      />\r\n      {selectedPrinter && (\r\n        <div>\r\n          <h2>Selected Printer:</h2>\r\n          <p><strong>Tên máy:</strong> {selectedPrinter.machineName}</p>\r\n          <p><strong>Vật liệu:</strong> {selectedPrinter.material}</p>\r\n          <p><strong>Màu:</strong> {selectedPrinter.color}</p>\r\n          <p><strong>File đang chờ:</strong> {selectedPrinter.queueLength}</p>\r\n          <p><strong>Loại máy:</strong> {selectedPrinter.type}</p>\r\n          <p><strong>Tốc độ:</strong> {selectedPrinter.speed}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GcodeUpload;\r\n","import React from 'react'\r\nimport Form from '@rjsf/core';\r\nimport validator from '@rjsf/validator-ajv8';\r\nimport formConfig from \"../../formConfig.json\"\r\n\r\nconst FilterProducts = () => {\r\n    const handleSubmit = ({ formData }) => {\r\n        console.log(\"Printer data:\", formData);\r\n     \r\n      };\r\n  return (\r\n    <div className=\"filter-products\">\r\n    <h3>Chọn sản phẩm</h3>\r\n    <Form \r\n    schema={formConfig.filterProducts.schema} \r\n    onSubmit={handleSubmit} \r\n    validator={validator} \r\n    uiSchema={formConfig.filterProducts.uiSchema} />\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default FilterProducts","import React,{useEffect,useState} from 'react';\r\nimport Form from '@rjsf/core';\r\nimport * as Realm from 'realm-web';\r\nimport validator from '@rjsf/validator-ajv8';\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\nconst SelectPrinter = ({selectPrinter}) => {\r\nconst [schema,setSchema]= useState({})\r\nconst [uiSchema,setUiSchema]= useState({})\r\n  useEffect(()=>{\r\n        fetchData()\r\n  },[])\r\n  const fetchData =async()=>{\r\n    try {\r\n      const result = await app.currentUser.functions.printerModule(\"dong\");\r\n      setSchema(result[0]?.public?.input?.jsonSchema)\r\n      setUiSchema(result[0]?.public?.input?.uiSchema)\r\n    } catch (error) {\r\n       console.log(error.error)\r\n    }\r\n  }\r\n  const handleSubmit = async ({ formData }) => {\r\n    try {\r\n     const result= await app.currentUser.functions.printerModule(formData);\r\n    console.log(result)\r\n    const data={\r\n      result,\r\n      press:\"yes\"\r\n    }\r\n     selectPrinter(data)\r\n    } catch (error) {\r\n      console.log(error.error)\r\n    }\r\n    // Add logic to select printer based on formData\r\n  \r\n  };\r\n\r\n  return (\r\n    <div className=\"select-printer\">\r\n      <h3>Chọn máy in</h3>\r\n      <Form schema={schema} onSubmit={handleSubmit} validator={validator} uiSchema={uiSchema} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectPrinter;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst ViewPrintingFiles = () => {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"view-printing-files\">\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewPrintingFiles;\r\n","import React, { useEffect,useState } from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport GcodeUpload from './GcodeUpload';\r\nimport FilterProducts from './FilterProducts';\r\nimport SelectPrinter from './SelectPrinter';\r\nimport ViewPrintingFiles from './ViewPrintingFiles';\r\nimport './home.css';\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst Home = () => {\r\n  const [printer, setPrinter] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n     try {\r\n        console.log(app.currentUser?.accessToken)\r\n        await app.currentUser?.refreshAccessToken();\r\n        if (!app.currentUser || app.currentUser?.accessToken === \"\") {\r\n          window.location.href = '/octoprint/login';\r\n        } \r\n      } catch (error) {\r\n        console.log(error.error);\r\n  \r\n    }\r\n  };\r\n  const selectPrinter = (newMessage) => {\r\n    setPrinter(newMessage);\r\n  };\r\n  return (\r\n    <div className=\"home-container\">\r\n      <GcodeUpload  printer={printer}/>\r\n      <SelectPrinter selectPrinter={selectPrinter}  />\r\n      <ViewPrintingFiles />\r\n      <FilterProducts />\r\n     \r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["_ref","isOpen","onClose","printers","onSelectPrinter","_jsx","className","children","_jsxs","onClick","length","map","printer","machineName","material","color","queueLength","type","speed","_id","app","Realm","id","process","isModalOpen","setIsModalOpen","useState","selectedPrinter","setSelectedPrinter","setPrinters","file","setFile","fileSize","setFileSize","message","setMessage","isLoading","setIsLoading","useEffect","_printer$result$","_printer$result$$publ","_printer$result$$publ2","_printer$result$$publ3","result","console","log","public","output","jsonData","press","handleOpenModal","accept","onChange","event","selectedFile","target","files","fileSizeMB","size","toFixed","parseFloat","async","user","currentUser","reader","FileReader","onload","fileContent","lines","split","printTime","timeMatch","match","parseInt","printerId","payload","fileName","name","userId","functions","uploadGcodeFile","success","document","querySelector","value","alert","readAsText","error","disabled","Modal","handleCloseModal","FilterProducts","Form","schema","formConfig","onSubmit","formData","validator","uiSchema","selectPrinter","setSchema","setUiSchema","fetchData","_result$","_result$$public","_result$$public$input","_result$2","_result$2$public","_result$2$public$inpu","printerModule","input","jsonSchema","_ref2","ViewPrintingFiles","Home","setPrinter","_app$currentUser","_app$currentUser2","_app$currentUser3","accessToken","refreshAccessToken","window","location","href","GcodeUpload","SelectPrinter","newMessage"],"sourceRoot":""}