{"version":3,"file":"static/js/159.920dfbb1.chunk.js","mappings":"oKAIA,MAAMA,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,0BA8FhC,EA5FoBC,KAClB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,IAClCG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,KAChCK,EAAWC,IAAgBN,EAAAA,EAAAA,WAAS,GA2E3C,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAOC,OAAO,SAASC,SA5EbC,IACxB,MAAMC,EAAeD,EAAME,OAAOC,MAAM,GACxC,GAAIF,EAAc,CAChB,MAAMG,GAAcH,EAAaI,KAAI,SAAkBC,QAAQ,GAC3DF,EAAa,GACfd,EAAW,8DACXL,EAAQ,MACRG,EAAY,KAEZH,EAAQgB,GACRb,EAAYmB,WAAWH,IACvBd,EAAW,IAEf,KAgEGN,IAAQS,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,cAAYR,EAAS,UACjCS,EAAAA,EAAAA,KAAA,UAAQY,QA9DSC,UACnB,GAAKzB,EAAL,CAKAQ,GAAa,GAEb,IACE,MAAMkB,EAAO/B,EAAIgC,YACjB,IAAKD,EAGH,OAFApB,EAAW,+BACXE,GAAa,GAIf,MAAMoB,EAAS,IAAIC,WACnBD,EAAOE,OAASL,UACd,MAAMM,EAAcf,EAAME,OAAOc,OAG3BC,EAAQF,EAAYG,MAAM,MAChC,IAAIC,EAAY,UAChB,GAAIF,EAAMG,OAAS,EAAG,CACpB,MACMC,EADWJ,EAAM,GACIK,MAAM,eAC7BD,IACFF,EAAYI,SAASF,EAAU,GAAI,IAEvC,CAEA,MAAMG,EAAU,CACdC,SAAUzC,EAAK0C,KACfC,OAAQjB,EAAK7B,GACbM,SAAUoB,WAAWpB,GACrB4B,cACAI,aAGIH,QAAeN,EAAKkB,UAAUC,gBAAgBL,GAEhDR,EAAOc,QACTxC,EAAW,8BAEXA,EAAW,yBAA2B0B,EAAO3B,SAE/CG,GAAa,EAAM,EAGrBoB,EAAOmB,WAAW/C,EACpB,CAAE,MAAOgD,GACPC,QAAQD,MAAM,wBAAyBA,GACvC1C,EAAW,wBACXE,GAAa,EACf,CAlDA,MAFEF,EAAW,mBAoDb,EAQiCI,UAAU,eAAewC,SAAU3C,IAAcP,EAAKW,SAClFJ,EAAY,eAAiB,WAE/BF,IAAWO,EAAAA,EAAAA,KAAA,KAAAD,SAAIN,MACZ,EC3FJV,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,0BAyBhC,EAvBaqD,MACXC,EAAAA,EAAAA,YAAU,KACTC,GAAW,GACT,IACL,MAAMA,EAAW5B,UACf,GAAK9B,EAAIgC,aAA+C,KAAhChC,EAAIgC,YAAY2B,YAGtC,UACQ3D,EAAIgC,YAAY4B,oBACxB,CAAE,MAAOP,GACPC,QAAQO,IAAIR,EAAMA,MACpB,MANAS,OAAOC,SAASC,KAAO,kBAOzB,EAEA,OACElD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAACb,EAAW,MACR,C","sources":["components/home/GcodeUpload.js","components/home/Home.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport './upload.css';\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst GcodeUpload = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [fileSize, setFileSize] = useState(0);\r\n  const [message, setMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    if (selectedFile) {\r\n      const fileSizeMB = (selectedFile.size / (1024 * 1024)).toFixed(2);\r\n      if (fileSizeMB > 5) {\r\n        setMessage('File size exceeds 5MB limit. Please select a smaller file.');\r\n        setFile(null);\r\n        setFileSize(0);\r\n      } else {\r\n        setFile(selectedFile);\r\n        setFileSize(parseFloat(fileSizeMB));\r\n        setMessage('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      setMessage('No file selected');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const user = app.currentUser;\r\n      if (!user) {\r\n        setMessage('User not authenticated');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = async (event) => {\r\n        const fileContent = event.target.result;\r\n\r\n        // Extract print time from the second line\r\n        const lines = fileContent.split('\\n');\r\n        let printTime = 'Unknown';\r\n        if (lines.length > 1) {\r\n          const timeLine = lines[1];\r\n          const timeMatch = timeLine.match(/;TIME:(\\d+)/);\r\n          if (timeMatch) {\r\n            printTime = parseInt(timeMatch[1], 10); // Convert to an integer\r\n          }\r\n        }\r\n\r\n        const payload = {\r\n          fileName: file.name,\r\n          userId: user.id,\r\n          fileSize: parseFloat(fileSize), // Ensure fileSize is a number\r\n          fileContent,\r\n          printTime,\r\n        };\r\n\r\n        const result = await user.functions.uploadGcodeFile(payload);\r\n\r\n        if (result.success) {\r\n          setMessage('File uploaded successfully');\r\n        } else {\r\n          setMessage('Error uploading file: ' + result.message);\r\n        }\r\n        setIsLoading(false);\r\n      };\r\n\r\n      reader.readAsText(file);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      setMessage('Error uploading file');\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Upload G-code File</h2>\r\n      <input type=\"file\" accept=\".gcode\" onChange={handleFileChange} />\r\n      {file && <p>File size: {fileSize} MB</p>}\r\n      <button onClick={handleUpload} className=\"btn btn-info\" disabled={isLoading || !file}>\r\n        {isLoading ? 'Uploading...' : 'Upload'}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GcodeUpload;\r\n","import React, { useEffect } from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport GcodeUpload from './GcodeUpload';\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst Home = () => {\r\n  useEffect(() => {\r\n   fetchData()\r\n  }, []);\r\nconst fetchData= async()=>{\r\n  if (!app.currentUser || app.currentUser.accessToken === '') {\r\n    window.location.href = '/octoprint/login';\r\n  }else{\r\n    try {\r\n      await app.currentUser.refreshAccessToken()\r\n    } catch (error) {\r\n      console.log(error.error)\r\n    }\r\n  }\r\n}\r\n  return (\r\n    <div>\r\n      <h2>Home Page</h2>\r\n      <GcodeUpload/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["app","Realm","id","process","GcodeUpload","file","setFile","useState","fileSize","setFileSize","message","setMessage","isLoading","setIsLoading","_jsxs","className","children","_jsx","type","accept","onChange","event","selectedFile","target","files","fileSizeMB","size","toFixed","parseFloat","onClick","async","user","currentUser","reader","FileReader","onload","fileContent","result","lines","split","printTime","length","timeMatch","match","parseInt","payload","fileName","name","userId","functions","uploadGcodeFile","success","readAsText","error","console","disabled","Home","useEffect","fetchData","accessToken","refreshAccessToken","log","window","location","href"],"sourceRoot":""}