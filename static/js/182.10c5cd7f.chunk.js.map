{"version":3,"file":"static/js/182.10c5cd7f.chunk.js","mappings":"oKAGA,MAAMA,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,0BAiGhC,EA/FiBC,KACf,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAASP,EAAIQ,cAC9BC,EAAaC,IAAkBH,EAAAA,EAAAA,UAAS,KACxCI,EAAeC,IAAoBL,EAAAA,EAAAA,UAAS,KAC5CM,EAAWC,IAAgBP,EAAAA,EAAAA,WAAS,IACpCQ,EAAgBC,IAAqBT,EAAAA,EAAAA,UAAS,IAC9CU,EAAcC,IAAmBX,EAAAA,EAAAA,UAAS,KAEjDY,EAAAA,EAAAA,YAAU,KACJd,GACFe,GACF,GACC,CAACf,IAEJ,MAqCMe,EAAqBC,UACzB,GAAIhB,EAAM,CACR,MACMiB,EADUjB,EAAKkB,YAAY,iBACNC,GAAG,aAAaF,WAAW,sBAChDG,QAAcH,EAAWI,KAAK,CAAC,GACrCd,EAAiBa,EACnB,GAQF,OACEE,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAOC,OAAO,SAASC,SAtDpBX,UACjB,MAAMY,EAAOC,EAAMC,OAAOV,MAAM,GAChC,GAAIQ,EAAM,CACR,GAAIA,EAAKG,KAAO,QAEd,YADAlB,EAAgB,wDAIlBJ,GAAa,GACbI,EAAgB,IAChB,MAAMmB,EAAS,IAAIC,WACnBD,EAAOE,WAAcC,IACfA,EAAEC,kBACJzB,EAAmBwB,EAAEE,OAASF,EAAEG,MAAS,IAC3C,EAEFN,EAAOO,OAASvB,UACd,MAAMZ,EAAc+B,EAAEL,OAAOU,OACvBC,EAAoBC,KAAKtC,GAE/B,IACE,MACMa,EADUjB,EAAKkB,YAAY,iBACNC,GAAG,aAAaF,WAAW,4BAChDA,EAAW0B,UAAU,CAAEC,SAAUhB,EAAKiB,KAAMzC,YAAaqC,IAC/DK,MAAM,8BACN/B,GACF,CAAE,MAAOgC,GACPC,QAAQD,MAAM,wBAAyBA,EACzC,CAAC,QACCtC,GAAa,GACbE,EAAkB,EACpB,GAEFqB,EAAOiB,mBAAmBrB,EAC5B,KAqBGpB,IACCc,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcb,EAAewC,QAAQ,GAAG,QAC3C1B,EAAAA,EAAAA,KAAA,YAAU2B,MAAOzC,EAAgB0C,IAAI,WAGxCxC,IAAgBY,EAAAA,EAAAA,KAAA,KAAG6B,MAAO,CAAEC,MAAO,OAAQ/B,SAAEX,KAC9CY,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,MAAAD,SACGjB,EAAciD,KAAK3B,IAClBN,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACGK,EAAKgB,UACNpB,EAAAA,EAAAA,KAAA,UAAQgC,QAASA,IArBFC,KACvB,MAAMrD,EAAcsD,KAAKD,GACzBpD,EAAeD,EAAY,EAmBIuD,CAAgB/B,EAAKxB,aAAamB,SAAC,mBAFnDK,EAAKgC,SAMjBxD,IACCkB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJC,EAAAA,EAAAA,KAAA,OAAAD,SAAMnB,SAGN,C","sources":["components/home/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as Realm from 'realm-web';\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n\r\nconst Manafile = () => {\r\n  const [user, setUser] = useState(app.currentUser);\r\n  const [fileContent, setFileContent] = useState(\"\");\r\n  const [uploadedFiles, setUploadedFiles] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchUploadedFiles();\r\n    }\r\n  }, [user]);\r\n\r\n  const uploadFile = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      if (file.size > 5 * 1024 * 1024) { // Check if file size is greater than 5MB\r\n        setErrorMessage(\"File size exceeds 5MB. Please upload a smaller file.\");\r\n        return;\r\n      }\r\n\r\n      setIsLoading(true);\r\n      setErrorMessage(\"\");\r\n      const reader = new FileReader();\r\n      reader.onprogress = (e) => {\r\n        if (e.lengthComputable) {\r\n          setUploadProgress((e.loaded / e.total) * 100);\r\n        }\r\n      };\r\n      reader.onload = async (e) => {\r\n        const fileContent = e.target.result;\r\n        const base64FileContent = btoa(fileContent); // Convert to base64 string\r\n\r\n        try {\r\n          const mongodb = user.mongoClient(\"mongodb-atlas\");\r\n          const collection = mongodb.db(\"octoprint\").collection(\"octoprintFileCloud\");\r\n          await collection.insertOne({ fileName: file.name, fileContent: base64FileContent });\r\n          alert(\"File uploaded successfully\");\r\n          fetchUploadedFiles();\r\n        } catch (error) {\r\n          console.error(\"Error uploading file:\", error);\r\n        } finally {\r\n          setIsLoading(false);\r\n          setUploadProgress(0);\r\n        }\r\n      };\r\n      reader.readAsBinaryString(file);\r\n    }\r\n  };\r\n\r\n  const fetchUploadedFiles = async () => {\r\n    if (user) {\r\n      const mongodb = user.mongoClient(\"mongodb-atlas\");\r\n      const collection = mongodb.db(\"octoprint\").collection(\"octoprintFileCloud\");\r\n      const files = await collection.find({});\r\n      setUploadedFiles(files);\r\n    }\r\n  };\r\n\r\n  const viewFileContent = (base64Content) => {\r\n    const fileContent = atob(base64Content); // Convert base64 string back to binary string\r\n    setFileContent(fileContent);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Upload G-code Files</h1>\r\n      <input type=\"file\" accept=\".gcode\" onChange={uploadFile} />\r\n      {isLoading && (\r\n        <div>\r\n          <p>Uploading... {uploadProgress.toFixed(2)}%</p>\r\n          <progress value={uploadProgress} max=\"100\"></progress>\r\n        </div>\r\n      )}\r\n      {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n      <h2>Uploaded Files</h2>\r\n      <ul>\r\n        {uploadedFiles.map((file) => (\r\n          <li key={file._id}>\r\n            {file.fileName}\r\n            <button onClick={() => viewFileContent(file.fileContent)}>View Content</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {fileContent && (\r\n        <div>\r\n          <h2>File Content</h2>\r\n          <pre>{fileContent}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Manafile;\r\n"],"names":["app","Realm","id","process","Manafile","user","setUser","useState","currentUser","fileContent","setFileContent","uploadedFiles","setUploadedFiles","isLoading","setIsLoading","uploadProgress","setUploadProgress","errorMessage","setErrorMessage","useEffect","fetchUploadedFiles","async","collection","mongoClient","db","files","find","_jsxs","children","_jsx","type","accept","onChange","file","event","target","size","reader","FileReader","onprogress","e","lengthComputable","loaded","total","onload","result","base64FileContent","btoa","insertOne","fileName","name","alert","error","console","readAsBinaryString","toFixed","value","max","style","color","map","onClick","base64Content","atob","viewFileContent","_id"],"sourceRoot":""}